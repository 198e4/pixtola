<!DOCTYPE html>
<html class="no-js" lang="en">
	<head>
		<!-- Meta -->
			<title>Case Study &middot; Lazyouts &middot; Tyler Richardson</title>
			<meta name="description" content="Examples of the creative work of Product Designer Tyler Richardson" />
			<meta charset="utf-8">
			<meta http-equiv="X-UA-Compatible" content="IE=edge" />
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			<link rel="manifest" href="../../manifest.json">
			<link rel="apple-touch-icon" href="../images/icon-192.png">
		<!-- JS (That's Necessary in <head>) -->
			<!-- SVG.JS -->
			<script src="/javascripts/plugins/svg.min.js" async></script>
		<!-- CSS -->
			<!-- UI -->
			<link rel="stylesheet" href="/stylesheets/css/ui.min.css" rel="preload" as="style" />
			<link rel="stylesheet" href="/stylesheets/css/case-study.min.css" rel="preload" as="style" />
			<!-- Material Icons -->
			<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
			<!-- Hero Image -->
			<style>
				.hero {background-image: url('/images/case-studies/lazyouts/layout-video@2x.gif');}
			</style>
	</head>
	<body>
		<!-- Navigation -->
		<div class="nav">
			<div class="nav-tab">
				<i class="material-icons nav-close-icon">close</i>
			</div>
			<div class="nav-content">
				<div class="nav-content">
					<img data-srcset="/images/nav-badge@1x.png,
							   /images/nav-badge@2x.png 2x,
							   /images/nav-badge@3x.png 3x"
						data-src="/images/nav-badge@3x.png"
						src="/images/nav-badge@3x.png" alt="Product Designer, Tyler Richardson" class="nav-art lazyload">
						<a href="/" class="nav-link">About Me</a>
						<a href="/case-studies/" class="nav-link">Case Studies</a>
				</div>
			</div>
		</div>
		<!-- Hero -->
		<div class="hero">
			<!-- Hero Copy -->
			<div class="hero-copy">
				<h1 class="hero-title">Lazyouts</h1>
				<h2 class="hero-subtitle">Case Study</h2>
			</div>
			<!-- Hero Filter -->
			<div class="hero-filter"></div>
			<!-- Hero Buttons -->
			{{!-- <div class="hero-buttons">
				<a href="" class="hero-btn">
					<img src="../images/tyler.png" alt="Tyler Richardson" class="hero-btn--img">
				</a>
				<a href="" class="hero-btn">
					<i class="material-icons">email</i>
				</a>
			</div> --}}
			<!-- View More CTA -->
			<div class="hero-view-more-row">
				<a href="#case-study" class="hero-view-more-btn heartbeat">
					<i class="material-icons">arrow_downward</i>
				</a>
			</div>
		</div>

		<!-- Anchor to Main Content from the Hero -->
		<a name="case-study"></a>

		<!-- Case Study Overview -->
		<div class="content cards content--overview d1c t1c m1c case-study__content">

			<div class="card card--flex">

				<div class="card__col--75">
					<h3 class="title">Overview</h3>
					<!-- <h4 class="subtitle">User Story</h4> -->
					<!-- <p class="copy">As a product manager, I’ve seen our codebase grow and inconsistency creep over the past couple years of our product’s development. While our team aims for consistency, we sometimes miss the mark. Part of this is due to our reliance on a popular component library that is the underlying skeleton of our interfaces. Inconsistencies that stem from overriding the component libraries visually opinionated defaults ultimately lead to common UI components like cards being built in different ways in different places. We’ve found that this introduces visual inconsistency at best, while at worse creating bugs, developer confusion, loss of time, among other things as a product manager I would like to limit.</p> -->
					<h4 class="subtitle">Who</h4>
					<ul class="list">
						<li>Product Manager</li>
						<li>Junior Level Developer</li>
						<li>Senior Level Developer</li>
					</ul>
					<h4 class="subtitle">What</h4>
					<p class="copy">A front-end framework behind the layout and UI of QuotedCar’s products.</p>
					<h4 class="subtitle">Why</h4>
					<ul class="list">
						<li>Consistency in usability and appearance, with the ability to iterate and maintain from a high level.</li>
						<li>Having a framework creates more opportunity for the team’s junior level developer to contribute in building layouts and components.</li>
						<li>The framework benefits the team’s senior level developer by freeing up time and mental bandwidth.</li>
					</ul>
					<!-- <p class="copy">Consistency in usability and appearance, with the ability to iterate and maintain from a high level. Having a framework creates more opportunity for the team’s junior level developer to contribute in building layouts and components. The framework benefits the team’s senior level developer by freeing up time and mental bandwidth.</p> -->

					<!-- <div class="card--img-row">

						<img data-srcset=".../../images/case-studies/overview/overview_email-gen@1x.png,
								   ../../images/case-studies/overview/overview_email-gen@2x.png 2x,
								   ../../images/case-studies/overview/overview_email-gen@3x.png 3x"
							data-src="../../images/case-studies/overview/overview_email-gen@3x.png"
							src="../../images/case-studies/overview/overview_email-gen@3x.png"
							class="img-row__img color lazyload modal_trigger--open"
							alt="Title 1"
							data-description="Description 1">

						<img data-srcset="../../images/case-studies/overview/overview_qc-logo@1x.png,
								   ../../images/case-studies/overview/overview_qc-logo@2x.png 2x,
								   ../../images/case-studies/overview/overview_qc-logo@3x.png 3x"
							data-src="../../images/case-studies/overview/overview_qc-logo@3x.png"
							src="../../images/case-studies/overview/overview_qc-logo@3x.png"
							class="img-row__img color lazyload modal_trigger--open"
							alt="Title 2"
							data-description="Description 2">

					</div> -->

				</div>

				<div class="card__col--25">
					<h4 class="subtitle">Client</h4>
					<img data-srcset="/images/case-studies/quotedcar-brand@1x.png,
							   /images/case-studies/quotedcar-brand@2x.png 2x,
							   /images/case-studies/quotedcar-brand@3x.png 3x"
						data-src="/images/case-studies/quotedcar-brand@3x.png"
						src="/images/case-studies/quotedcar-brand@3x.png"
						class="client-brand lazyload"
						alt="QuotedCar, LLC">
					<h4 class="subtitle">Roles</h4>
					<div class="tags">
						<div class="tag">Project Manager</div>
						<div class="tag">UX Design</div>
						<div class="tag">Visual Design</div>
						<div class="tag">Front-End Dev</div>
					</div>
					<h4 class="subtitle">Skills &amp; Tools</h4>
					<div class="tags">
						<div class="tag">Sketch</div>
						<div class="tag">Principle</div>
						<div class="tag">Figma</div>
						<div class="tag">HTML</div>
						<div class="tag">CSS</div>
						<div class="tag">Sass</div>
						<div class="tag">JavaScript</div>
						<div class="tag">jQuery</div>
					</div>
				</div>

			</div>

		</div>

		<!-- "Problem" -->
		<div class="stripe black case-study__content">

			<div class="stripe_copy-container">

				<h3 class="title">The Problem</h3>
				<p class="copy">As a product manager, I’ve seen our codebase grow and inconsistency creep over the past couple years of our product’s development. While our team aims for consistency, we sometimes miss the mark. Part of this is due to our reliance on a popular component library that is the underlying skeleton of our interfaces. Inconsistencies that stem from overriding the component libraries visually opinionated defaults ultimately lead to common UI components like cards being built in different ways in different places. We’ve found that this introduces visual inconsistency at best, while at worse creating bugs, developer confusion, loss of time, among other things as a product manager I would like to limit.</p>

			</div>

			<div class="stripe_stat-container">
				<h3 class="title--stat">4</h3>
				<p class="copy--stat">Different ways a card's HTML &amp; CSS was written in v1.2.1 when layouts and components were built using Bootstrap.</p>
			</div>

			<div class="stripe_stat-container">
				<h3 class="title--stat">3</h3>
				<p class="copy--stat">Product team members; a content manager/junior developer, a senior level software developer, and me the product manager/product designer/senior front-end developer.</p>
			</div>

		</div>

		<!-- "Process" -->
		<div class="content cards d1c t1c m1c case-study__content content--process">

			<div class="card">

				<h3 class="title">The Process</h3>

				<div class="timeline">

					<div id="timeline-track"></div>

					<div class="timeline-content">

						<div class="interval">
							<h4 class="subtitle">Assessing Needs</h4>
							<p class="copy">We need an internal framework, similar to what we were using before, but simpler, smaller, and better suited to our needs.</p>
							<p class="copy">When we boil it down, what we need falls into a few categories.</p>
							<ol class="list timeline-card">
								<li>Layouts</li>
								<li>UI Components</li>
								<li>JavaScript helper functions</li>
								<li>Works in >IE10</li>
							</ol>
						</div>

						<div class="interval">
							<h4 class="subtitle">Wireframing</h4>
						</div>

						<div class="subinterval">
							<h4 class="subtitle">Layouts</h4>
							<p class="copy">Laying a foundation for the framework's cards and components.</p>
							<div class="grid_1 timeline--img-row interval--img-row img-row--stack">

	 							<img data-srcset="/images/case-studies/lazyouts/layout-video@1x.gif,
	 									   /images/case-studies/lazyouts/layout-video@2x.gif 2x"
	 								data-src="/images/case-studies/lazyouts/layout-video@2x.gif"
	 								src="/images/case-studies/lazyouts/layout-video@2x.gif"
	 								class="timeline--img-row__img color lazyload modal_trigger--open"
	 								alt="4 Column Card Grid"
	 								data-description="">

							</div>
							<div class="grid_3 timeline--img-row interval--img-row">

								<img data-srcset="/images/case-studies/lazyouts/layout-sidebar-left-layout@1x.png,
										   /images/case-studies/lazyouts/layout-sidebar-left-layout@2x.png 2x"
									data-src="/images/case-studies/lazyouts/layout-sidebar-left-layout@2x.png"
									src="/images/case-studies/lazyouts/layout-sidebar-left-layout@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Left Sidebar Layout"
									data-description="">

								<img data-srcset="/images/case-studies/lazyouts/layout-12-column-grid@1x.png,
										   /images/case-studies/lazyouts/layout-12-column-grid@2x.png 2x"
									data-src="/images/case-studies/lazyouts/layout-12-column-grid@2x.png"
									src="/images/case-studies/lazyouts/layout-12-column-grid@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Equally Spaced Column Grid"
									data-description="">

								<img data-srcset="/images/case-studies/lazyouts/layout-sidebar-right-layout@1x.png,
										   /images/case-studies/lazyouts/layout-sidebar-right-layout@2x.png 2x"
									data-src="/images/case-studies/lazyouts/layout-sidebar-right-layout@2x.png"
									src="/images/case-studies/lazyouts/layout-sidebar-right-layout@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Right Sidebar Layout"
									data-description="">

							</div>
						</div>

						<div class="subinterval">
							<h4 class="subtitle">Cards</h4>
							<p class="copy">The basic building blocks of the framework.</p>

							<div class="grid_3 timeline--img-row interval--img-row">

								<img data-srcset="/images/case-studies/lazyouts/wireframe-card-4-column@1x.png,
										   /images/case-studies/lazyouts/wireframe-card-4-column@2x.png 2x"
									data-src="/images/case-studies/lazyouts/wireframe-card-4-column@2x.png"
									src="/images/case-studies/lazyouts/wireframe-card-4-column@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="4 Column Card Grid"
									data-description="">

								<img data-srcset="/images/case-studies/lazyouts/wireframe-card-6-column@1x.png,
										   /images/case-studies/lazyouts/wireframe-card-6-column@2x.png 2x"
									data-src="/images/case-studies/lazyouts/wireframe-card-6-column@2x.png"
									src="/images/case-studies/lazyouts/wireframe-card-6-column@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="6 Column Card"
									data-description="">

								<img data-srcset="/images/case-studies/lazyouts/wireframe-card-12-column@1x.png,
										   /images/case-studies/lazyouts/wireframe-card-12-column@2x.png 2x"
									data-src="/images/case-studies/lazyouts/wireframe-card-12-column@2x.png"
									src="/images/case-studies/lazyouts/wireframe-card-12-column@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="12 Column Card"
									data-description="">

							</div>

						</div>

						<div class="subinterval">
							<h4 class="subtitle">Components</h4>
							<p class="copy">Modals, progress bar, tabs, multi-steps, and system feedback notifications amongst others.</p>

							<div class="grid_4 timeline--img-row interval--img-row">

								<img data-srcset="/images/case-studies/lazyouts/wireframe-card-progress-bar@1x.png,
										   /images/case-studies/lazyouts/wireframe-card-progress-bar@2x.png 2x"
									data-src="/images/case-studies/lazyouts/wireframe-card-progress-bar@2x.png"
									src="/images/case-studies/lazyouts/wireframe-card-progress-bar@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Modal &amp; Progress Bar Components"
									data-description="">

								<img data-srcset="/images/case-studies/lazyouts/wireframe-tabs@1x.png,
										   /images/case-studies/lazyouts/wireframe-tabs@2x.png 2x"
									data-src="/images/case-studies/lazyouts/wireframe-tabs@2x.png"
									src="/images/case-studies/lazyouts/wireframe-tabs@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Card Tab Component"
									data-description="">

								<img data-srcset="/images/case-studies/lazyouts/wireframe-multi-step@1x.png,
										   /images/case-studies/lazyouts/wireframe-multi-step@2x.png 2x"
									data-src="/images/case-studies/lazyouts/wireframe-multi-step@2x.png"
									src="/images/case-studies/lazyouts/wireframe-multi-step@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Multi-Step Card Component"
									data-description="">

								<img data-srcset="/images/case-studies/lazyouts/wireframe-system-feedback@1x.png,
										   /images/case-studies/lazyouts/wireframe-system-feedback@2x.png 2x"
									data-src="/images/case-studies/lazyouts/wireframe-system-feedback@2x.png"
									src="/images/case-studies/lazyouts/wireframe-system-feedback@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="System Feedback Notification Component"
									data-description="">

								<img data-srcset="/images/case-studies/lazyouts/wireframe-card-dropdown@1x.png,
										   /images/case-studies/lazyouts/wireframe-card-dropdown@2x.png 2x"
									data-src="/images/case-studies/lazyouts/wireframe-card-dropdown@2x.png"
									src="/images/case-studies/lazyouts/wireframe-card-dropdown@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Card Dropdown Menu Component"
									data-description="">

								<img data-srcset="/images/case-studies/lazyouts/wireframe-card-rows-with-menus@1x.png,
										   /images/case-studies/lazyouts/wireframe-card-rows-with-menus@2x.png 2x"
									data-src="/images/case-studies/lazyouts/wireframe-card-rows-with-menus@2x.png"
									src="/images/case-studies/lazyouts/wireframe-card-rows-with-menus@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Card Rows with Menu Component"
									data-description="">

								<img data-srcset="/images/case-studies/lazyouts/wireframe-single-card-with-sidebar-and-menu@1x.png,
										   /images/case-studies/lazyouts/wireframe-single-card-with-sidebar-and-menu@2x.png 2x"
									data-src="/images/case-studies/lazyouts/wireframe-single-card-with-sidebar-and-menu@2x.png"
									src="/images/case-studies/lazyouts/wireframe-single-card-with-sidebar-and-menu@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Slide-in Flex Menu Component"
									data-description="For enhanced options and controls launched from a card.">

								<img data-srcset="/images/case-studies/lazyouts/wireframe-heros@1x.png,
										   /images/case-studies/lazyouts/wireframe-heros@2x.png 2x"
									data-src="/images/case-studies/lazyouts/wireframe-heros@2x.png"
									src="/images/case-studies/lazyouts/wireframe-heros@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Hero Component"
									data-description="">

							</div>

						</div>

						<div class="interval">
							<h4 class="subtitle">Front-End Development</h4>
						</div>

						<div class="subinterval">
							<h4 class="subtitle">CSS &amp; SASS</h4>
							<p class="copy">In terms of layouts, SASS was a big help in building the framework. For instance, three SASS mixins allowed us to cover the gamut of layout scenarios we would encounter including:</p>
							<ol class="list timeline-card">
								<li>Up to a 12-column equally spaced grid at 100% width</li>
								<li>Left-side sidebars up to 50% width</li>
								<li>Right-side sidebars up to 50% width</li>
							</ol>
							<p class="copy">Here's an example of a mixin I built to generate the 12 column layout classes we needed for the framework's equally spaced grid layout. Vendor prefixing to meet our need of "Works in >IE10" was provided by <a href="https://autoprefixer.github.io/">Autoprefixer</a>.</p>
							<div class="code">
								<div class="tags">
									<div class="tag">SASS</div>
								</div>
								<p class="block">

									<span class="blue">// Part 1. Grid Properties Shared by All Columns</span><br>
									.layout <span class="white">{</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">display:</span> grid<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">display:</span> -ms-grid<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">align-items:</span> stretch<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">-webkit-box-align:</span> stretch<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">-ms-flex-align:</span> stretch<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">justify-content:</span> center<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">-webkit-box-pack:</span> center<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">-ms-flex-pack:</span> center<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">grid-row-gap:</span> 25px<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">grid-column-gap:</span> 25px<span class="white">;</span><br>
									<span class="white">}</span><br><br>

									<span class="blue">// Part 2. SASS Mixin Example: Equally Spaced Columns Layout</span><br>
									<span class="white">@mixin</span> grid<span class="white">(</span>$columns<span class="white">,</span> $areas<span class="white">)</span> <span class="white">{</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">-ms-grid-columns:</span> <span class="white">(</span><span class="pink">1fr</span><span class="white">)[</span>$columns<span class="white">]</span><span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">grid-template-columns:</span> repeat<span class="white">(</span>$columns<span class="white">,</span> <span class="pink">1fr</span><span class="white">)</span><span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">grid-template-areas:</span> $areas<span class="white">;</span><br>
									<span class="white">}</span>
									<br><br>
									<span class="blue">// 1 Column Grid Layout Example Class</span><br>
									.col_1 <span class="white">{</span><br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">@include</span> grid<span class="white">(</span><span class="pink">1</span><span class="white">,</span> <span class="white">"</span><span class="pink">col</span><span class="white">")</span><span class="white">;</span><br>
									<span class="white">}</span>
									<br><br>
									<span class="blue">// 2 Column Grid Layout Example Class</span><br>
									.col_2 <span class="white">{</span><br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">@include</span> grid<span class="white">(</span><span class="pink">2</span><span class="white">,</span> <span class="white">"</span><span class="pink">col col</span><span class="white">")</span><span class="white">;</span><br>
									<span class="white">}</span>
									<br><br>
									<span class="blue">// 3 Column Grid Layout Example Class</span><br>
									.col_3 <span class="white">{</span><br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">@include</span> grid<span class="white">(</span><span class="pink">3</span><span class="white">,</span> <span class="white">"</span><span class="pink">col col col</span><span class="white">")</span><span class="white">;</span><br>
									<span class="white">}</span>
									<br><br>
									<span class="blue">// ... through 12 columns</span><br>
								</p>
							</div>
						</div>

						<div class="subinterval">
							<h4 class="subtitle">HTML</h4>
							<p class="copy">With the SASS in place, a <span class="code--inline">&lt;div&gt;</span> is used to create a new layout in the HTML by giving it the <span class="code--inline">layout</span> class, which contains the grid properties that are shared by all of the layout columns.</p>
							<p class="copy">Then classes for the layout's column structure are added. The class <span class="code--inline">col_4</span> is used in this simplified example to give the layout we're creating four columns. This helps in keeping the compiled CSS DRY, and is also an indicator in the HTML for a structural element.</p>
							<div class="code">
								<div class="tags">
									<div class="tag">HTML</div>
								</div>
								<p class="block">
									<span class="white">&lt;</span>div class<span class="white">=&quot;</span><span class="pink">layout col_4</span><span class="white">&quot;&gt;</span><br >
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="blue">&lt;!-- Child &lt;div&gt;s here become layout columns --&gt;</span><br>
									<span class="white">&lt;/</span>div<span class="white">&gt;</span>
								</p>
							</div>

							<p class="copy">The framework is also fully responsive with breakpoints to cover mobile, tablet, desktop and more. For simplicity in the code example used above, the additional column classes were not included. In production, the framework's HTML would look more like this:</p>

							<div class="code">
								<div class="tags">
									<div class="tag">HTML</div>
								</div>
								<p class="block">

									<span class="white">&lt;</span>div class<span class="white">=&quot;</span><span class="pink">layout d_4c t_2c m_1c</span><span class="white">&quot;&gt;</span><br >
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="blue">&lt;!-- Child &lt;div&gt;s here become layout columns --&gt;</span><br>
									<span class="white">&lt;/</span>div<span class="white">&gt;</span>

								</p>
							</div>

							<p class="copy">Where the class names indicate the layout type for each specific breakpoint:</p>

							<ul class="list">
								<li><span class="code--inline">d_4c</span> = 4 columns on desktops and larger screens (&gt;=1301px)</li>
								<li><span class="code--inline">t_2c</span> = 2 columns on tablets (&lt;=1300px)</li>
								<li><span class="code--inline">m_1c</span> = 1 column on mobile (&lt;=700px)</li>
							</ul>

							<p class="copy">For added flexibility, each layout class is fully nestable in the others, creating nearly unlimited possibilities to build a layout.</p>

							<div class="grid_2 timeline--img-row interval--img-row">

								{{!--
								<img data-srcset="/images/case-studies/lazyouts/layout-nested-layouts-example-01@1x.png,
										   /images/case-studies/lazyouts/layout-nested-layouts-example-01@2x.png 2x"
									data-src="/images/case-studies/lazyouts/layout-nested-layouts-example-01@2x.png"
									src="/images/case-studies/lazyouts/layout-nested-layouts-example-01@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Nested Layout Example"
									data-description="">
								--}}

								<img data-srcset="/images/case-studies/lazyouts/layout-nested-layouts-example-02@1x.png,
										   /images/case-studies/lazyouts/layout-nested-layouts-example-02@2x.png 2x"
									data-src="/images/case-studies/lazyouts/layout-nested-layouts-example-02@2x.png"
									src="/images/case-studies/lazyouts/layout-nested-layouts-example-02@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Nested Layout Example"
									data-description="">

								<img data-srcset="/images/case-studies/lazyouts/layout-nested-layouts-example-03@1x.png,
										   /images/case-studies/lazyouts/layout-nested-layouts-example-03@2x.png 2x"
									data-src="/images/case-studies/lazyouts/layout-nested-layouts-example-03@2x.png"
									src="/images/case-studies/lazyouts/layout-nested-layouts-example-03@2x.png"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Nested Layout Example"
									data-description="">

							</div>


						</div>

						<div class="subinterval">
							<h4 class="subtitle">JavaScript &amp; jQuery</h4>
							<p class="copy">Behind the scenes of the framework’s layouts and components are a set of utility functions. These utility functions were built in JavaScript and jQuery to assist with dynamic actions the UI would need to contain to power certain UI features like:</p>
							<ul class="list">
								<li>Navigation</li>
								<li>Dropdown menus</li>
								<li>Collapsable containers</li>
								<li>Tabbed cards</li>
								<li>Multi-Step cards</li>
								<li>Swiping cards</li>
								<li>Card row menus</li>
								<li>Modals</li>
								<li>Lazy loading images</li>
								<li>System feedback notifications</li>
							</ul>
							<p class="copy">Here's an example utility function which is used to show &amp; hide collapsable content containers.</p>

							<div class="code">
								<div class="tags">
									<div class="tag">JavaScript</div>
									<div class="tag">jQuery</div>
								</div>
								<p class="block">
									<span class="white">const</span> <span class="pink">TRIGGER</span> = '.trigger > .btn'<span class="white">;</span><br><br>
									<span class="white">function</span> manageCollapsableContainer<span class="white">()</span> <span class="white">{</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="blue">// Collapsable Content Corresponding to Trigger</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">let</span> <span class="pink">content</span> = $(<span class="pink">this</span>)<span class="white">.</span>closest(<span class="pink">'.container'</span>).siblings(<span class="pink">'.content'</span>)<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="blue">// Toggle the Trigger Button's Active State</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(<span class="pink">this</span>)<span class="white">.</span>toggleClass(<span class="pink">'active'</span>)<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="blue">// Toggle the Collapsable Content</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">if</span> <span class="white">(!</span><span class="pink">content</span><span class="white">.</span>hasClass(<span class="pink">'hide'</span>)<span class="white">)</span> <span class="white">{</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="blue">// Content Showing, Update Trigger Icon &amp; Content State</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(<span class="pink">this</span>)<span class="white">.</span>find(<span class="pink">'.material-icons'</span>)<span class="white">.</span>html(<span class="pink">'add'</span>)<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pink">content</span><span class="white">.</span>removeClass(<span class="pink">'show'</span>)<span class="white">.</span>addClass(<span class="pink">'hide'</span>)<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">} else {</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="blue">// Content Hiding, Update Trigger Icon &amp; Content State</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(<span class="pink">this</span>)<span class="white">.</span>find(<span class="pink">'.material-icons'</span>)<span class="white">.</span>html(<span class="pink">'remove'</span>)<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pink">content</span><span class="white">.</span>removeClass(<span class="pink">'hide'</span>)<span class="white">.</span>addClass(<span class="pink">'show'</span>)<span class="white">;</span><br>
									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="white">}</span><br>
									<span class="white">}</span><br><br>
									<span class="blue">// Call the Function When the Trigger is Clicked</span><br>
									$<span class="white">(</span>document<span class="white">).</span>on(<span class="pink">'click'</span><span class="white">,</span> <span class="pink">TRIGGER</span><span class="white">,</span> <span class="pink">manageCollapsableContainer</span>)<span class="white">;</span><br>
								</p>
							</div>
							<p class="copy">My personal favorite utility function takes a background color and dynamically applies a properly contrasting white or black color to the text that sits on the layer above it. Using this function is a great boost to the product’s usability as it always ensures text is readable, no matter what content is thrown at it. Here's an example of this utility function being turned on and off as it applies to the names of a vehicle's exterior and interior colors in QuotedCar.</p>
							<div class="grid_1 timeline--img-row interval--img-row">

								<img data-srcset="/images/case-studies/lazyouts/js-color-utility@1x.gif,
										   /images/case-studies/lazyouts/js-color-utility@2x.gif 2x"
									data-src="/images/case-studies/lazyouts/js-color-utility@2x.gif"
									src="/images/case-studies/lazyouts/js-color-utility@2x.gif"
									class="timeline--img-row__img color lazyload modal_trigger--open"
									alt="Nested Layout Example"
									data-description="">

							</div>

						</div>

					</div>

				</div>

			</div>

		</div>

		<!-- Solution -->
		<div class="stripe green case-study__content">

			<div class="stripe_copy-container">

				<h3 class="title">The Solution</h3>
				<p class="copy">The solution to the problem was our very own framework and component library built using HTML, CSS and JavaScript, with some help from SASS and jQuery along the way. </p>
				<p class="copy">The primary benefits have come over time in the form of less bugs and increased visual consistency for users, which builds trust, and for the developers it has made the codebase friendlier and less of a burden to maintain. </p>
				<p class="copy">Having our own framework has also had the benefit of increasing collaboration on the team. The three members of our small team are all able to contribute in a greater and more meaningful way, with our junior developer stepping in and taking over some of the more mundane issues from our senior level developer. Having a more steady and consistent burndown rate for issues in our sprint was the icing on the proverbial cake.</p>
			</div>

			<div class="stripe_stat-container">
				<h3 class="title--stat">37%</h3>
				<p class="copy--stat">Amount of front-end sprint tasks that were able to be deferred from a senior to a junior level developer.</p>
			</div>

		</div>

		<div class="content cards d1c t1c m1c case-study__content content--solution">

			<div class="card">

				<!-- <img data-srcset=".../../images/case-studies/overview/overview_email-gen@1x.png,
						   ../../images/case-studies/overview/overview_email-gen@2x.png 2x,
						   ../../images/case-studies/overview/overview_email-gen@3x.png 3x"
					data-src="../../images/case-studies/overview/overview_email-gen@3x.png"
					src="../../images/case-studies/overview/overview_email-gen@3x.png"
					class="img--full-width color lazyload modal_trigger--open"
					alt="Title 1"
					data-description="Description 1"> -->

				<!-- <p class="copy">Here is some copy to go along with this other stuff.</p> -->

				<!-- <img data-srcset="../../images/case-studies/overview/overview_qc-logo@1x.png,
						   ../../images/case-studies/overview/overview_qc-logo@2x.png 2x,
						   ../../images/case-studies/overview/overview_qc-logo@3x.png 3x"
					data-src="../../images/case-studies/overview/overview_qc-logo@3x.png"
					src="../../images/case-studies/overview/overview_qc-logo@3x.png"
					class="img--full-width color lazyload modal_trigger--open"
					alt="Title 2"
					data-description="Description 2"> -->

				<!-- <p class="copy">And here are some more things to go along with this other stuff.</p> -->

			</div>

		</div>

		<!-- Case Studies Pager -->
		<div class="pager">
			<div class="pager__title">
				<h3 class="title">More Case Studies</h3>
			</div>
			<div class="pager__links">
				<a class="page__prev" href="/quotedcar-logo/">
					<i class="material-icons">keyboard_backspace</i>
					<h4 class="subtitle">QuotedCar's Logo Design</h4>
				</a>
				<a class="page__next" href="/online-price-book/">
					<h4 class="subtitle">Online Price Book</h4>
					<i class="material-icons">keyboard_backspace</i>
				</a>
			</div>
		</div>

		<!-- Footer -->
		<div class="footer">
			<div class="copyright-year">
				<div class="copyright-year--left">20</div>
				<div class="copyright-year--middle">
					<img data-srcset="/images/copyright.svg"
						data-src="/images/copyright.svg"
						src="/images/copyright.svg" alt="Copyright Tyler Richardson All Rights Reserved" class="copyright-symbol lazyload">
				</div>
				<div class="copyright-year--right">20</div>
			</div>
			<h2 class="copyright-attribution">Tyler Richardson</h2>
			<p class="copyright-copy">All Rights Reserved</p>
		</div>

		<!-- Modal -->
		<div class="modal hide">
			<div class="modal_close modal_trigger--close">
				<i class="material-icons">close</i>
			</div>
			<div class="modal_card">
				<!-- <div class="loader">
					<div class="loading-circle--1"></div>
					<div class="loading-circle--2"></div>
				</div> -->
				<img class="modal_img" src="" alt="">
				<div class="modal_type">
					<h3 class="title"></h3>
					<p class="copy"></p>
				</div>
			</div>
			<div class="modal_bg modal_trigger--close hide">
			</div>
		</div>

		<!-- JS -->
			<!-- The core Firebase JS SDK is always required and must be listed first -->
			<script src="/__/firebase/7.7.0/firebase-app.js"></script>
			<!-- TODO: Add SDKs for Firebase products that you want to use
			     https://firebase.google.com/docs/web/setup#available-libraries -->
			<script src="/__/firebase/7.7.0/firebase-analytics.js"></script>
			<!-- Initialize Firebase -->
			<script src="/__/firebase/init.js"></script>
			<!-- jQuery -->
			<script src="../../javascripts/plugins/jquery.min.js"></script>
			<!-- Lettering JS -->
			<script src="../../javascripts/jquery.lettering-0.6.1.min.js"></script>
			<!-- Lazysizes -->
			<script src="../../javascripts/plugins/lazysizes.min.js" async></script>
			<!-- node-vibrant -->
			<script src="../../javascripts/plugins/vibrant.min.js"></script>
			<!-- UI -->
			<script src="/javascripts/ui.min.js"></script>
	</body>
</html>
